name: CI

on:
  push:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
  pull_request:

env:
  PYTEST_ADDOPTS: "-v --color=yes -n auto --internet-tests --junitxml=test-data/test-results.xml"
  FORCE_COLOR: "1"
  MPLBACKEND: agg
  UV_CONSTRAINT: ci/constraints.txt

defaults:
  run:
    shell: bash -e {0} # -e to fail on error

jobs:
  get-environments:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.get-envs.outputs.envs }}
    steps:
      - uses: actions/checkout@v4
        with:
          filter: blob:none
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: false
      - id: get-envs
        run: |
          ENVS_JSON=$(NO_COLOR=1 uvx hatch env show --json | jq -c 'to_entries
            | map(
              select(.key | startswith("hatch-test"))
              | {
                name: .key,
                "test-type": (if (.key | test("pre|min")) then "coverage" else null end),
                python: .value.python,
              }
            )')
          echo "envs=${ENVS_JSON}" | tee $GITHUB_OUTPUT

  test:
    needs: get-environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJSON(needs.get-environments.outputs.envs) }}
    env:  # environment variable for use in codecov’s env_vars tagging
      ENV_NAME: ${{ matrix.env.name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: ${{ matrix.env.python }}
          cache-dependency-glob: pyproject.toml

      - name: Cache downloaded data
        uses: actions/cache@v4
        with:
          path: .pytest_cache/d/scanpy-data
          key: pytest

      - name: Install dependencies
        run: uvx hatch -v env create ${{ matrix.env.name }}

      - name: Run tests
        if: matrix.env.test-type == null
        run: uvx hatch run ${{ matrix.env.name }}:run
      - name: Run tests (coverage)
        if: matrix.env.test-type == 'coverage'
        run: uvx hatch run ${{ matrix.env.name }}:run-cov --cov --cov-report=xml

      - name: Upload coverage data
        uses: codecov/codecov-action@v5
        if: matrix.env.test-type == 'coverage'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: ENV_NAME
          fail_ci_if_error: true
          files: test-data/coverage.xml

      - name: Upload test results
        # yaml strings can’t start with “!”, so using explicit substitution
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: ENV_NAME
          fail_ci_if_error: true
          file: test-data/test-results.xml

      - name: Publish debug artifacts
        if: matrix.env.test-type == 'coverage'
        uses: actions/upload-artifact@v4
        with:
          name: debug-data-${{ matrix.env.name }}
          path: .pytest_cache/d/debug

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: false
      - run: uvx --from build pyproject-build --sdist --wheel .
      - run: uvx twine check dist/*

  check:
    if: always()
    needs:
      - get-environments
      - test
      - build
    runs-on: ubuntu-latest
    steps:
        - uses: re-actors/alls-green@release/v1
          with:
            jobs: ${{ toJSON(needs) }}
