[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[project]
name = "scanpy"
description = "Single-Cell Analysis in Python."
requires-python = ">=3.8"
license = "BSD-3-clause"
authors = [
    {name = "Alex Wolf"},
    {name = "Philipp Angerer"},
    {name = "Fidel Ramirez"},
    {name = "Isaac Virshup"},
    {name = "Sergei Rybakov"},
    {name = "Gokcen Eraslan"},
    {name = "Tom White"},
    {name = "Malte Luecken"},
    {name = "Davide Cittaro"},
    {name = "Tobias Callies"},
    {name = "Marius Lange"},
    {name = "Andrés R. Muñoz-Rojas"},
]
maintainers = [
    {name = "Isaac Virshup", email = "ivirshup@gmail.com"},
    {name = "Philipp Angerer", email = "phil.angerer@gmail.com"},
    {name = "Alex Wolf", email = "f.alex.wolf@gmx.de"},
]
readme = "README.md"
classifiers = [
    "License :: OSI Approved :: BSD License",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Framework :: Jupyter",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
    "anndata>=0.7.4",
    # numpy needs a version due to #1320
    "numpy>=1.17.0",
    "matplotlib>=3.4",
    # pandas 2.1.2 has pandas/issues/52927
    "pandas >=1.1.1, !=2.1.2",
    "scipy>=1.4",
    "seaborn!=0.13.0",
    "h5py>=3",
    "tqdm",
    "scikit-learn>=0.24",
    "statsmodels>=0.10.0rc2",
    "patsy",
    "networkx>=2.3",
    "natsort",
    "joblib",
    "numba>=0.41.0",
    "umap-learn>=0.3.10",
    "packaging",
    "session-info",
    "get-annotations; python_version < '3.10'",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://scanpy.readthedocs.io/"
Source = "https://github.com/scverse/scanpy"
Home-page = "https://scanpy.org"

[project.scripts]
scanpy = "scanpy.cli:console_main"

[project.optional-dependencies]
test-min = [
    "pytest>=4.4",
    "pytest-nunit",
    "profimp",
]
test = [
    "scanpy[test-min]",
    # Optional but important dependencies
    "scanpy[leiden]",
    "zarr",
    "scanpy[dask]",
]
test-full = [
    "scanpy[test]",
    # tested algorithms
    "scanpy[leiden]",
    "scanpy[magic]",
    "scanpy[skmisc]",
    "scanpy[harmony]",
    "scanpy[scanorama]",
    "scanpy[scrublet]",
]
doc = [
    "sphinx>=4.4",
    "sphinx-rtd-theme>=1.0",
    "scanpydoc[typehints] >=0.7.7, <0.8",
    "myst-parser",
    "matplotlib!=3.6.1",
    "scanpy[paga]",
]
dev = [
    # getting the dev version
    "setuptools_scm",
    # static checking
    "black>=20.8b1",
    "docutils",
]
# Algorithms
paga = ["igraph"]
louvain = ["igraph", "louvain>=0.6,!=0.6.2"]  # Louvain community detection
leiden = ["igraph>=0.10", "leidenalg>=0.9"]  # Leiden community detection
bbknn = ["bbknn"]  # Batch balanced KNN (batch correction)
magic = ["magic-impute>=2.0"]  # MAGIC imputation method
skmisc = ["scikit-misc>=0.1.3"]  # highly_variable_genes method 'seurat_v3'
harmony = ["harmonypy"]  # Harmony dataset integration
scanorama = ["scanorama"]  # Scanorama dataset integration
scrublet = ["scrublet"]  # Doublet detection
# Acceleration
rapids = ["cudf>=0.9", "cuml>=0.9", "cugraph>=0.9"]  # GPU accelerated calculation of neighbors
dask = ["dask[array]!=2.17.0"]  # Use the Dask parallelization engine

[tool.hatch.build]
exclude = ["scanpy/tests"]
[tool.hatch.version]
source = "vcs"
[tool.hatch.build.hooks.vcs]
version-file = "scanpy/_version.py"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
    "-pscanpy.testing._pytest",
]
testpaths = ["scanpy"]
norecursedirs = ["scanpy/tests/_images"]
xfail_strict = true
nunit_attach_on = "fail"
markers = [
    "internet: tests which rely on internet resources (enable with `--internet-tests`)",
]

[tool.coverage.run]
source_pkgs = ["scanpy"]
omit = ["*/tests/*"]
[tool.coverage.paths]
source = [".", "**/site-packages"]

[tool.black]
line-length = 88
target-version = ["py38"]
skip-string-normalization = true

[tool.ruff]
select = [
    "F",  # Pyflakes
    "E",  # Pycodestyle errors
    "W",  # Pycodestyle warnings
    "TID251",  # Banned imports
]
ignore = [
    # module imported but unused -> required for Scanpys API
    "F401",
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # module level import not at top of file -> required to circumvent circular imports for Scanpys API
    "E402",
    # E266 too many leading '#' for block comment -> Scanpy allows them for comments into sections
    "E262",
    # allow I, O, l as variable names -> I is the identity matrix, i, j, k, l is reasonable indexing notation
    "E741",
]
[tool.ruff.per-file-ignores]
# Do not assign a lambda expression, use a def
"scanpy/tools/_rank_genes_groups.py" = ["E731"]
[tool.ruff.flake8-tidy-imports.banned-api]
"pytest.importorskip".msg = "Use the “@needs” decorator/mark instead"
"pandas.api.types.is_categorical_dtype".msg = "Use isinstance(s.dtype, CategoricalDtype) instead"
"pandas.value_counts".msg = "Use pd.Series(a).value_counts() instead"
